{"version":3,"sources":["api/axiosHttp.js","api/markApi.js","components/BookMark/index.js","components/AddBookMark/index.js","components/AddCate/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","data","post","id","delete","BookMark","marks","categories","onRemove","className","to","style","margin","map","cate","index","key","name","mark","indexMark","categoryId","fontSize","paddingLeft","float","onClick","window","confirm","href","AddBookMark","onAdd","redirect","useHistory","useForm","register","handleSubmit","errors","onSubmit","newLink","push","type","placeholder","ref","required","pattern","defaultValue","value","Math","floor","AddCate","App","useState","setMarks","setCate","useEffect","a","apiRequest","response","status","console","log","getMarks","getCate","onAddMark","onAddCate","path","exact","newProduct","filter","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a866249b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://5f5ee4c3df620f00163e504c.mockapi.io/\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});","import http from './axiosHttp';\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/marks\");\r\n}\r\n\r\nconst create = (data) => {\r\n    return http.post(\"/marks\", data);\r\n}\r\n\r\nconst remove = id => {\r\n    return http.delete(`/marks/${id}`);\r\n}\r\n\r\nconst getAllCate = () => {\r\n    return http.get(\"/categories\");\r\n}\r\n\r\nconst createCate = (data) => {\r\n    return http.post(\"/categories\", data);\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    getAllCate,\r\n    createCate,\r\n}","import React from 'react'\r\nimport './BookMark.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst BookMark = ({ marks, categories, onRemove }) => {\r\n    const onHandleRemove = (id) => {\r\n        onRemove(id);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Bookmarks</h1>\r\n            <Link to=\"/add-bookmark\" className=\"btn btn-primary\">\r\n                Add Bookmark\r\n            </Link>\r\n            <Link to=\"/add-cate\" className=\"btn btn-success\" style={{ margin: 10 }}>\r\n                Add Cate\r\n            </Link>\r\n            <div className=\"row\">\r\n                {\r\n                    categories.map((cate, index) => (\r\n                        <div className=\"col-6\" key={index}>\r\n                            <h3>{cate.name}</h3>\r\n                            {\r\n                                marks.map((mark, indexMark) => (\r\n                                    (mark.categoryId === cate.id)\r\n                                        ?\r\n                                        (\r\n                                            <div className=\"title-mark\" key={indexMark} >\r\n                                                <i className=\"far fa-bookmark\" id=\"icon\" style={{ fontSize: 40, paddingLeft: 12, float: \"left\" }}></i>\r\n                                                <span>{mark.name}</span>\r\n                                                <button onClick={() => { if (window.confirm('Delete this item?')) { onHandleRemove(mark.id) }; }} className=\"btn btn-danger\">Delete</button>\r\n                                                <a href={mark.http} className=\"btn btn-success\">Visit</a>\r\n                                            </div>\r\n                                        ) : null\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nBookMark.propTypes = {\r\n\r\n}\r\n\r\nexport default BookMark\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './AddBookMark.scss'\r\n\r\nconst AddBookMark = ({ onAdd, categories }) => {\r\n    let redirect = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const onHandleSubmit = (data) => {\r\n        const newLink = {\r\n            ...data,\r\n        }\r\n        onAdd(newLink);\r\n        redirect.push(\"/\");\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n                <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n                    <h5>Add a bookmark</h5>\r\n                    <div className=\"form-group\">\r\n                        <label>Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter a name for your link\"\r\n                            ref={register({ required: true })}\r\n                            name=\"name\"\r\n                        />\r\n                        {errors.name && \"Required\"}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Link</label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"https://example.com\"\r\n                            ref={register({ pattern: /^((http|https|ftp):\\/\\/)/ })}\r\n                            name=\"http\"\r\n                        />\r\n                        {errors.http && \"Bạn phải nhập đường dẫn\"}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Categories</label>\r\n                        <select className=\"form-control\" name=\"categoryId\" ref={register} defaultValue={1}>\r\n                            {\r\n                                categories.map(({ id, name }, index) => (\r\n                                    <option key={index} value={Math.floor(id)} >{name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddBookMark.propTypes = {\r\n\r\n}\r\n\r\nexport default AddBookMark\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './AddCate.scss'\r\n\r\nconst AddCate = ({ onAdd }) => {\r\n    let redirect = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const onHandleSubmit = (data) => {\r\n        const newLink = {\r\n            ...data,\r\n        }\r\n        onAdd(newLink);\r\n        redirect.push(\"/\");\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n                <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n                    <h5>Add a categories</h5>\r\n                    <div className=\"form-group\">\r\n                        <label>Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter a name for your link\"\r\n                            ref={register({ required: true })}\r\n                            name=\"name\"\r\n                        />\r\n                        {errors.name && \"Required\"}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCate.propTypes = {\r\n\r\n}\r\n\r\nexport default AddCate\r\n","import React, { useEffect, useState } from 'react';\nimport {\n  HashRouter,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport './App.css';\nimport apiRequest from './api/markApi';\n\nimport BookMark from './components/BookMark';\nimport AddBookMark from './components/AddBookMark';\nimport AddCate from './components/AddCate';\n\n\nfunction App() {\n  const [marks, setMarks] = useState([]);\n  const [categories, setCate] = useState([]);\n  useEffect(() => {\n    const getMarks = async () => {\n      try {\n        const response = await apiRequest.getAll();\n        if (response.status === 200) {\n          setMarks(response.data)\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getMarks();\n    const getCate = async () => {\n      try {\n        const response = await apiRequest.getAllCate();\n        if (response.status === 200) {\n          setCate(response.data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCate();\n  }, [])\n\n  const onAddMark = async (mark) => {\n    try {\n      const { data } = await apiRequest.create(mark);\n      setMarks([\n        ...marks,\n        data\n      ])\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const onRemoveMark = (id) => {\n    try {\n      apiRequest.remove(id);\n      const newProduct = marks.filter(mark => mark.id !== id);\n      setMarks(newProduct);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const onAddCate = async (cate) => {\n    try {\n      const { data } = await apiRequest.createCate(cate);\n      setCate([\n        ...categories,\n        data\n      ])\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/\" exact>\n            <BookMark marks={marks} categories={categories} onRemove={onRemoveMark} />\n          </Route>\n          <Route path=\"/add-bookmark\">\n            <AddBookMark categories={categories} onAdd={onAddMark} />\n          </Route>\n          <Route path=\"/add-cate\">\n            <AddCate onAdd={onAddCate} />\n          </Route>\n        </Switch>\n      </HashRouter>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}