{"version":3,"sources":["api/axiosHttp.js","api/markApi.js","components/BookMark/index.js","components/AddBookMark/index.js","mock/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","data","post","id","delete","BookMark","marks","categories","onRemove","onHandleRemove","className","to","map","cate","name","mark","index","cate_id","key","style","fontSize","paddingLeft","float","onClick","window","confirm","href","AddBookMark","onAdd","redirect","useHistory","useForm","register","handleSubmit","errors","onSubmit","newLink","push","type","placeholder","ref","required","pattern","defaultValue","value","Math","floor","Test","App","useState","setMarks","console","log","useEffect","a","apiRequest","response","status","db","getMarks","onAddMark","path","exact","newProduct","filter","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2wCAEeA,E,OAAAA,EAAMC,OAAO,CAExBC,QAAS,+CACTC,QAAS,CACL,eAAgB,sBCYT,EAhBA,WACX,OAAOC,EAAKC,IAAI,UAeL,EAZA,SAACC,GACZ,OAAOF,EAAKG,KAAK,QAASD,IAWf,EARA,SAAAE,GACX,OAAOJ,EAAKK,OAAL,gBAAqBD,KC6DjBE,G,MApEE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAC7BC,EAAiB,SAACN,GACpBK,EAASL,IAEb,OACI,yBAAKO,UAAU,aACX,yCACA,kBAAC,IAAD,CAAMC,GAAG,gBAAgBD,UAAU,mBAAnC,OAGA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,4BAEQH,EAAWK,KAAI,SAAAC,GAAI,OACH,IAAZA,EAAKV,GAAWU,EAAKC,KAAO,QAKpCR,EAAMM,KAAI,SAACG,EAAMC,GAAP,OACW,GAAhBD,EAAKE,QAGE,yBAAKd,GAAG,OAAOO,UAAU,aAAaQ,IAAKF,GACvC,uBAAGN,UAAU,kBAAkBP,GAAG,OAAOgB,MAAO,CAAEC,SAAU,GAAIC,YAAa,GAAIC,MAAO,UACxF,8BAAOP,EAAKD,MACZ,4BAAQS,QAAS,WAAYC,OAAOC,QAAQ,sBAAwBhB,EAAeM,EAAKZ,KAAUO,UAAU,kBAA5G,UACA,uBAAGgB,KAAMX,EAAKhB,KAAMW,UAAU,mBAA9B,UAEJ,SAIpB,yBAAKA,UAAU,SACX,4BAEQH,EAAWK,KAAI,SAAAC,GAAI,OACH,IAAZA,EAAKV,GAAWU,EAAKC,KAAO,OAKpCR,EAAMM,KAAI,SAACG,EAAMC,GAAP,OACW,GAAhBD,EAAKE,QAGE,yBAAKP,UAAU,aAAaQ,IAAKF,GAC7B,uBAAGN,UAAU,kBAAkBP,GAAG,OAAOgB,MAAO,CAAEC,SAAU,GAAIC,YAAa,GAAIC,MAAO,UACxF,8BAAOP,EAAKD,MACZ,4BAAQS,QAAS,WAAYC,OAAOC,QAAQ,sBAAwBhB,EAAeM,EAAKZ,KAAUO,UAAU,kBAA5G,UACA,uBAAGgB,KAAMX,EAAKhB,KAAMW,UAAU,mBAA9B,UAEJ,a,gBCKrBiB,G,MAzDK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOrB,EAAiB,EAAjBA,WACtBsB,EAAWC,cAD4B,EAEAC,cAAnCC,EAFmC,EAEnCA,SAAUC,EAFyB,EAEzBA,aAAcC,EAFW,EAEXA,OAQhC,OACI,yBAAKxB,UAAU,aACX,yBAAKA,UAAU,QACX,0BAAMyB,SAAUF,GAVL,SAAChC,GACpB,IAAMmC,EAAO,eACNnC,GAEP2B,EAAMQ,GACNP,EAASQ,KAAK,SAMF,8CACA,yBAAK3B,UAAU,cACX,uCACA,2BACI4B,KAAK,OACL5B,UAAU,eACV6B,YAAY,6BACZC,IAAKR,EAAS,CAAES,UAAU,IAC1B3B,KAAK,SAERoB,EAAOpB,MAAQ,YAEpB,yBAAKJ,UAAU,cACX,uCACA,2BAAO4B,KAAK,OACR5B,UAAU,eACV6B,YAAY,sBACZC,IAAKR,EAAS,CAAEU,QAAS,6BACzB5B,KAAK,SAERoB,EAAOnC,MAAQ,8DAEpB,yBAAKW,UAAU,cACX,6CACA,4BAAQA,UAAU,eAAeI,KAAK,UAAU0B,IAAKR,EAAUW,aAAc,GAErEpC,EAAWK,KAAI,WAAeI,GAAf,IAAGb,EAAH,EAAGA,GAAIW,EAAP,EAAOA,KAAP,OACX,4BAAQI,IAAKF,EAAO4B,MAAOC,KAAKC,MAAM3C,IAAOW,QAK7D,4BAAQwB,KAAK,SAAS5B,UAAU,mBAAhC,eCjDL,GACXqC,K,OC0FWC,MAhFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACN3C,EADM,KACC4C,EADD,KAEbC,QAAQC,IAAI9C,GAFC,MAGiB2C,mBAAS,IAH1B,mBAGN1C,EAHM,UAKb8C,qBAAU,YACM,uCAAG,4BAAAC,EAAA,+EAEUC,IAFV,OAEPC,EAFO,OAGbL,QAAQC,IAAII,GACY,MAApBA,EAASC,QACXP,EAASQ,EAAGX,KAAKhC,MALN,gDASboC,QAAQC,IAAR,MATa,yDAAH,qDAsBdO,KAUC,IAEH,IAAMC,EAAS,uCAAG,WAAO7C,GAAP,iBAAAuC,EAAA,+EAESC,EAAkBxC,GAF3B,gBAENd,EAFM,EAENA,KACRiD,EAAS,GAAD,mBACH5C,GADG,CAENL,KALY,gDAQdkD,QAAQC,IAAR,MARc,yDAAH,sDAsBf,OACE,yBAAK1C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmD,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,CAAUxD,MAAOA,EAAOC,WAAYA,EAAYC,SAfrC,SAACL,GACpB,IACEoD,EAAkBpD,GAClB,IAAM4D,EAAazD,EAAM0D,QAAO,SAAAjD,GAAI,OAAIA,EAAKZ,KAAOA,KACpD+C,EAASa,GACT,MAAOE,GACPd,QAAQC,IAAIa,QAWR,kBAAC,IAAD,CAAOJ,KAAK,iBACV,kBAAC,EAAD,CAAavD,MAAOA,EAAOC,WAAYA,EAAYqB,MAAOgC,SCvElDM,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhB,GACLd,QAAQc,MAAMA,EAAMiB,c","file":"static/js/main.e5eba309.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    // baseURL: \"http://localhost:8080\",\r\n    baseURL: \"https://5f5ee4c3df620f00163e504c.mockapi.io/\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});","import http from './axiosHttp';\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/mark\");\r\n}\r\n\r\nconst create = (data) => {\r\n    return http.post(\"/mark\", data);\r\n}\r\n\r\nconst remove = id => {\r\n    return http.delete(`/mark/${id}`);\r\n}\r\n\r\nconst getAllCate = () => {\r\n    return http.get(\"/categories\");\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    getAllCate\r\n}","import React from 'react'\r\nimport './BookMark.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst BookMark = ({ marks, categories, onRemove }) => {\r\n    const onHandleRemove = (id) => {\r\n        onRemove(id);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Bookmarks</h1>\r\n            <Link to=\"/add-bookmark\" className=\"btn btn-primary\">\r\n                Add\r\n            </Link>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h3>\r\n                        {\r\n                            categories.map(cate => (\r\n                                cate.id === 1 ? cate.name : \" \"\r\n                            ))\r\n                        }\r\n                    </h3>\r\n                    {\r\n                        marks.map((mark, index) => (\r\n                            (mark.cate_id == 1)\r\n                                ?\r\n                                (\r\n                                    <div id=\"xxxx\" className=\"title-mark\" key={index} >\r\n                                        <i className=\"far fa-bookmark\" id=\"icon\" style={{ fontSize: 40, paddingLeft: 12, float: \"left\" }}></i>\r\n                                        <span>{mark.name}</span>\r\n                                        <button onClick={() => { if (window.confirm('Delete this item?')) { onHandleRemove(mark.id) }; }} className=\"btn btn-danger\">Delete</button>\r\n                                        <a href={mark.http} className=\"btn btn-success\">Visit</a>\r\n                                    </div>\r\n                                ) : null\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h3>\r\n                        {\r\n                            categories.map(cate => (\r\n                                cate.id === 2 ? cate.name : \"\"\r\n                            ))\r\n                        }\r\n                    </h3>\r\n                    {\r\n                        marks.map((mark, index) => (\r\n                            (mark.cate_id == 2)\r\n                                ?\r\n                                (\r\n                                    <div className=\"title-mark\" key={index} >\r\n                                        <i className=\"far fa-bookmark\" id=\"icon\" style={{ fontSize: 40, paddingLeft: 12, float: \"left\" }}></i>\r\n                                        <span>{mark.name}</span>\r\n                                        <button onClick={() => { if (window.confirm('Delete this item?')) { onHandleRemove(mark.id) }; }} className=\"btn btn-danger\">Delete</button>\r\n                                        <a href={mark.http} className=\"btn btn-success\">Visit</a>\r\n                                    </div>\r\n                                ) : null\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nBookMark.propTypes = {\r\n\r\n}\r\n\r\nexport default BookMark\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './AddBookMark.scss'\r\n\r\nconst AddBookMark = ({ onAdd, categories }) => {\r\n    let redirect = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const onHandleSubmit = (data) => {\r\n        const newLink = {\r\n            ...data,\r\n        }\r\n        onAdd(newLink);\r\n        redirect.push(\"/\");\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n                <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n                    <h5>Add a bookmark</h5>\r\n                    <div className=\"form-group\">\r\n                        <label>Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter a name for your link\"\r\n                            ref={register({ required: true })}\r\n                            name=\"name\"\r\n                        />\r\n                        {errors.name && \"Required\"}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Link</label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"https://example.com\"\r\n                            ref={register({ pattern: /^((http|https|ftp):\\/\\/)/ })}\r\n                            name=\"http\"\r\n                        />\r\n                        {errors.http && \"Bạn phải nhập đường dẫn\"}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Categories</label>\r\n                        <select className=\"form-control\" name=\"cate_id\" ref={register} defaultValue={1}>\r\n                            {\r\n                                categories.map(({ id, name }, index) => (\r\n                                    <option key={index} value={Math.floor(id)} >{name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddBookMark.propTypes = {\r\n\r\n}\r\n\r\nexport default AddBookMark\r\n","import Test from './test.json';\r\n\r\nexport default {\r\n    Test\r\n};","import React, { useEffect, useState } from 'react';\nimport {\n  HashRouter,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport './App.css';\nimport apiRequest from './api/markApi';\n\nimport BookMark from './components/BookMark';\nimport AddBookMark from './components/AddBookMark';\nimport db from './mock/index';\n\nfunction App() {\n  const [marks, setMarks] = useState([]);\n  console.log(marks);\n  const [categories, setCate] = useState([]);\n  // const url = \"https://5f5ee4c3df620f00163e504c.mockapi.io/categories/1/bookmarks\";\n  useEffect(() => {\n    const getMarks = async () => {\n      try {\n        const response = await apiRequest.getAll();\n        console.log(response);\n        if (response.status === 200) {\n          setMarks(db.Test.mark)\n        }\n        // setMarks(data);\n      } catch (error) {\n        console.log(error);\n      }\n\n      // (apiRequest.getAll(), {\n      //   method: 'get'\n      // })\n      //   .then(response => console.log(response))\n\n      // .then(data => {\n      //   console.log(data);\n      //   // setMarks(data)\n      // })\n    }\n    getMarks();\n    // const getCate = async () => {\n    //   try {\n    //     const { data } = await apiRequest.getAllCate();\n    //     setCate(data);\n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    // }\n    // getCate();\n  }, [])\n\n  const onAddMark = async (mark) => {\n    try {\n      const { data } = await apiRequest.create(mark);\n      setMarks([\n        ...marks,\n        data\n      ])\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const onRemoveMark = (id) => {\n    try {\n      apiRequest.remove(id);\n      const newProduct = marks.filter(mark => mark.id !== id);\n      setMarks(newProduct);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/\" exact>\n            <BookMark marks={marks} categories={categories} onRemove={onRemoveMark} />\n          </Route>\n          <Route path=\"/add-bookmark\">\n            <AddBookMark marks={marks} categories={categories} onAdd={onAddMark} />\n          </Route>\n        </Switch>\n      </HashRouter>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}